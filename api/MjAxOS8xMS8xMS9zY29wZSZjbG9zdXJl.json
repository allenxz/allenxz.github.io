{"title":"JavaScript--作用域和闭包","date":"2019-11-11T13:04:20.894Z","thumbnail":"https://s2.ax1x.com/2019/11/11/MlFI0A.md.jpg","link":"2019/11/11/scope&closure","updated":"2019-11-12T08:08:56.148Z","content":"<p>闭包，虽然名字听起来无趣乏味，但是在使用时它会展现出无与伦比的美感。</p>\n<h2 id=\"闭包\">闭包<a href=\"2019/11/11/scope&closure#闭包\"></a></h2><p>闭包是作用域应用的特殊情况，有两种表现：</p>\n<ul>\n<li><p>函数作为参数进行传递</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fn = create()</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">fn() <span class=\"comment\">//100</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>函数作为返回值进行返回</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">200</span></span><br><span class=\"line\">  fn() </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(fn) <span class=\"comment\">//100</span></span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<p>总结：所有自由变量的查找，都是在<strong>定义</strong>的地方逐级往上寻找，而不是在执行的地方</p>\n<h2 id=\"this\">this<a href=\"2019/11/11/scope&closure#this\"></a></h2><p>使用场景有：</p>\n<ul>\n<li><p>作为普通函数</p>\n<p>谁直接调用的就指向谁。</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> zhangsan = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'张三'</span>,</span><br><span class=\"line\">  sayHi() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this--当前对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  wait() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this--Window</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>使用call、apply、bind</p>\n<p>传入的参数是什么，指向的就是什么 </p>\n</li>\n<li><p>作为对象被调用</p>\n<p>指向对象本身 </p>\n</li>\n<li><p>在class方法中被调用</p>\n<p>指向实例本身</p>\n</li>\n<li><p>箭头函数</p>\n<p>箭头函数的<code>this</code>取值为上级作用域的<code>this</code></p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> zhangsan = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'张三'</span>,</span><br><span class=\"line\">  sayHi() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this--当前对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  wait() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this--当前对象</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n</li>\n</ul>\n<p>但是，this在各个场景中取什么值是在函数<strong>执行</strong>的时候确定的，不是在函数定义的时候确定的。</p>\n<h2 id=\"手写bind-call-apply函数\">手写bind\\call\\apply函数<a href=\"2019/11/11/scope&closure#手写bind-call-apply函数\"></a></h2><ul>\n<li>bind</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myBind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.apply(context,args)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>call</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myCall = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">context</span>) </span>&#123; </span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...arguments].slice(<span class=\"number\">1</span>)</span><br><span class=\"line\">  context.fn(args)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<ul>\n<li>apply</li>\n</ul>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  context.fn = <span class=\"keyword\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> arg = [...arguments].slice(<span class=\"number\">1</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(arg <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'the second parms must be Array!'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  context.fn(arg)</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"实际开发中闭包的应用\">实际开发中闭包的应用<a href=\"2019/11/11/scope&closure#实际开发中闭包的应用\"></a></h2><p>隐藏数据，写一个cache小工具</p>\n<figure class=\"highlight javascript\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCache</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(key, value) &#123;</span><br><span class=\"line\">      data[key]= value</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function(key) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> data[key]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n","next":{"title":"JavaScript--原型","link":"2019/11/11/prototype"},"plink":"http://yoursite.com/2019/11/11/scope&closure/","toc":[{"title":"闭包","id":"闭包","index":"1"},{"title":"this","id":"this","index":"2"},{"title":"手写bind\\call\\apply函数","id":"手写bind-call-apply函数","index":"3"},{"title":"实际开发中闭包的应用","id":"实际开发中闭包的应用","index":"4"}]}