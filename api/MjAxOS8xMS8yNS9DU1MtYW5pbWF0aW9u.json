{"title":"CSS —— 动画","date":"2019-11-25T07:49:10.623Z","thumbnail":"https://s2.ax1x.com/2019/11/25/Mj4DEt.md.jpg","link":"2019/11/25/CSS-animation","updated":"2019-11-25T08:47:44.525Z","content":"<h2 id=\"动画类型\">动画类型<a href=\"2019/11/25/CSS-animation#动画类型\"></a></h2><ul>\n<li>transition 补间动画</li>\n<li>keyframe 关键帧动画</li>\n<li>逐帧动画</li>\n</ul>\n<h3 id=\"补间动画\">补间动画<a href=\"2019/11/25/CSS-animation#补间动画\"></a></h3><p>顾名思义就是定义开始状态和结束状态，中间通过浏览器运算补全。</p>\n<p>但是不是什么中间状态都能运算补全。可补的属性有：</p>\n<ul>\n<li>位置 - 平移</li>\n<li>方位 - 旋转</li>\n<li>大小 - 缩放</li>\n<li>透明度</li>\n<li>其他 - 线性变换</li>\n</ul>\n<p>使用方法：transition: delay property duratin，此外还可以同时添加多种属性的过渡动画。</p>\n<p>transition-timing-function: 定义动画进度和时间的关系。</p>\n<h3 id=\"关键帧动画\">关键帧动画<a href=\"2019/11/25/CSS-animation#关键帧动画\"></a></h3><ul>\n<li>相当于多个补间动画</li>\n<li>与元素状态的变化没有关系</li>\n<li>定义更加灵活</li>\n<li>不需要提供hover之类的触发动画。打开页面就自动跑起来。</li>\n</ul>\n<p>例子:</p>\n<figure class=\"highlight css\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">run</span> 1<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\">@<span class=\"keyword\">keyframes</span> run &#123;</span><br><span class=\"line\">  0%&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  100%&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">800px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>animation-direction: 动画进行方向</p>\n<p>animation-iteration-count: 动画循环次数</p>\n<p>animation-play-state: 动画播放状态</p>\n<p>animation-fill-mode: 动画最后的填充模式</p>\n<h3 id=\"逐帧动画\">逐帧动画<a href=\"2019/11/25/CSS-animation#逐帧动画\"></a></h3><p>每一帧都是关键帧，中间没补间。是关键帧动画的一种特殊形式。</p>\n<ul>\n<li><p>适用于无法补间计算的动画</p>\n</li>\n<li><p>资源较大，适用于动画时长较短，图片偏小的场景。</p>\n</li>\n<li><p>使用steps() </p>\n<p>animation-timing-function: steps(1)，取消关键帧之间的过渡</p>\n</li>\n</ul>\n<h2 id=\"面试题\">面试题<a href=\"2019/11/25/CSS-animation#面试题\"></a></h2><ol>\n<li>CSS动画的实现方式有几种<ul>\n<li>过渡动画</li>\n<li>关键帧动画</li>\n</ul>\n</li>\n<li>过渡动画和关键帧动画的区别<ul>\n<li>过渡动画需要有状态变化</li>\n<li>关键帧动画不需要状态变化</li>\n<li>关键帧动画能控制得更精细</li>\n</ul>\n</li>\n<li>如何实现逐帧动画<ul>\n<li>使用关键帧动画</li>\n<li>使用steps(1)取消关键帧之间的补间</li>\n</ul>\n</li>\n<li>CSS动画的性能<ul>\n<li>性能不坏</li>\n<li>部分情况优于JS</li>\n<li>但是JS可以做的更好</li>\n<li>存在部分高危属性，box-shadow等。制作相关的动画时性能很差。</li>\n</ul>\n</li>\n</ol>\n","prev":{"title":"CSS —— 预处理器","link":"2019/11/25/CSS-preprocessor"},"next":{"title":"CSS —— 效果","link":"2019/11/25/CSS-effect"},"plink":"http://allenxz.github.io/2019/11/25/CSS-animation/","toc":[{"title":"动画类型","id":"动画类型","index":"1","children":[{"title":"补间动画","id":"补间动画","index":"1.1"},{"title":"关键帧动画","id":"关键帧动画","index":"1.2"},{"title":"逐帧动画","id":"逐帧动画","index":"1.3"}]},{"title":"面试题","id":"面试题","index":"2"}]}