{"title":"What is in ES6","date":"2019-11-27T06:52:04.916Z","thumbnail":"https://s2.ax1x.com/2019/11/26/MzO5b6.md.jpg","link":"2019/11/27/what-is-in-es6","tags":["ES6","JavaScript","面试"],"categories":["Programming"],"updated":"2019-12-24T02:29:52.741Z","content":"<h2 id=\"Let-amp-Const\">Let &amp; Const<a href=\"2019/11/27/what-is-in-es6#Let-amp-Const\"></a></h2><h3 id=\"作用域\">作用域<a href=\"2019/11/27/what-is-in-es6#作用域\"></a></h3><ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n<li>动态作用域</li>\n<li>块级作用域</li>\n</ul>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\">b = <span class=\"number\">2</span></span><br></pre></td></tr></table></div></figure>\n\n<p>例子中的a，b都具有全局访问性，但是a是全局变量，b是window对象上的一个属性。没有使用关键字定义变量，变量会直接挂在window上作为一个属性，具有全局作用域。 </p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span>  a = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span>  b = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a) <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.b) <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"let的特点\">let的特点<a href=\"2019/11/27/what-is-in-es6#let的特点\"></a></h3><ul>\n<li>let声明的变量是块级作用域的</li>\n<li>let声明的对象不能用全局对象的属性来访问</li>\n<li>let不能重复定义一个变量</li>\n<li>let不会进行变量提升</li>\n</ul>\n<h3 id=\"const的特点\">const的特点<a href=\"2019/11/27/what-is-in-es6#const的特点\"></a></h3><ul>\n<li>const定义的是常量</li>\n<li>const不允许声明时不初始化</li>\n</ul>\n<h3 id=\"Q-amp-A\">Q&amp;A<a href=\"2019/11/27/what-is-in-es6#Q-amp-A\"></a></h3><ol>\n<li><p>下面代码的输出是什么？如何能根据i的顺序输出</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i)</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>A：</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// output</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">3</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// solution</span></span><br><span class=\"line\">改<span class=\"keyword\">var</span>为<span class=\"keyword\">let</span></span><br></pre></td></tr></table></div></figure>\n\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>下面的代码会发生什么</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">4</span></span><br></pre></td></tr></table></div></figure>\n\n<p>A : 会报错<code>Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</code>，因为let定义的变量不会进行变量提升。</p>\n</li>\n</ol>\n<h2 id=\"Array\">Array<a href=\"2019/11/27/what-is-in-es6#Array\"></a></h2><h3 id=\"数组遍历\">数组遍历<a href=\"2019/11/27/what-is-in-es6#数组遍历\"></a></h3><ul>\n<li><p>for循环</p>\n</li>\n<li><p>forEach，但是不支持continue和break</p>\n</li>\n<li><p>every()</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n\n<p>和forEach相比，可以模拟实现break和continue</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// break</span></span><br><span class=\"line\">arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// continue</span></span><br><span class=\"line\">arr.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(item === <span class=\"number\">2</span>)&#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(item)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>for…in</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index,arr[index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>但是这种方式遍历会有小问题，会将数组上的其他自定义属性也遍历到。</p>\n<p>而且这里的index是字符串，如果要支持continue和break，需要将index转成数字再 === 进行判断</p>\n<figure class=\"highlight js\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> index <span class=\"keyword\">in</span> arr)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(index*<span class=\"number\">1</span> === <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index,arr[index])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n</li>\n<li><p>for…of</p>\n<p>也可以进行数组遍历，但主要是用于遍历数组和对象以外的<strong>可遍历</strong>结构。</p>\n</li>\n</ul>\n<h3 id=\"数组转换\">数组转换<a href=\"2019/11/27/what-is-in-es6#数组转换\"></a></h3><p>怎么将类数组转成数组</p>\n<blockquote>\n<p>to be contined……</p>\n</blockquote>\n","prev":{"title":"Vue中的插槽","link":"2019/12/07/slot-in-vue"},"next":{"title":"CSS —— 工程化","link":"2019/11/26/CSS-engineering"},"plink":"http://allenxz.github.io/2019/11/27/what-is-in-es6/","toc":[{"title":"Let &amp; Const","id":"Let-amp-Const","index":"1","children":[{"title":"作用域","id":"作用域","index":"1.1"},{"title":"let的特点","id":"let的特点","index":"1.2"},{"title":"const的特点","id":"const的特点","index":"1.3"},{"title":"Q&amp;A","id":"Q-amp-A","index":"1.4"}]},{"title":"Array","id":"Array","index":"2","children":[{"title":"数组遍历","id":"数组遍历","index":"2.1"},{"title":"数组转换","id":"数组转换","index":"2.2"}]}]}